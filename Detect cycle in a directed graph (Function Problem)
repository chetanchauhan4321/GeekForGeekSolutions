http://practice.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1

/*
Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function would be added by GfG's Online Judge.*/


/*
The structure of the class is as follows 
which contains an integer V denoting the no 
of vertices and a list of adjacency vertices.
class Graph
{
    int V;
    list<int> *adj;
public :
    Graph(int V);
    void addEdge(int v,int w);
    bool isCyclic();
};
*/
/*You are required to complete this method*/
bool dfs(int v,vector<int>color,list<int>adj[])
{
   
color[v]=1;

    for(auto i=adj[v].begin();i!=adj[v].end();i++)
    {
        if(color[*i]==1)return true;
        else if(color[*i]==0&&dfs(*i,color,adj)==1)return true;
    }

color[v]=2;
return false;
}
bool Graph :: isCyclic()
{
//Your code here
vector<int>color(V,0);
for(int i=0;i<V;i++)
{
 if(dfs(i,color,adj))return true;
}

return false;
}
